/*! For license information please see components-src-Settings-Settings-stories.6b4c3dc9.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkessex_toolkit_stories=self.webpackChunkessex_toolkit_stories||[]).push([[4140],{"../components/src/NumberSpinButton/NumberSpinButton.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{E:()=>NumberSpinButton});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../.yarn/cache/react-npm-18.2.0-1eae08fee2-88e38092da.zip/node_modules/react/jsx-runtime.js"),_fluentui_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../.yarn/__virtual__/@fluentui-react-virtual-9ea33fb0b9/0/cache/@fluentui-react-npm-8.106.9-8cdfe7d4ca-f4428f8fbb.zip/node_modules/@fluentui/react/lib-commonjs/index.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../.yarn/cache/react-npm-18.2.0-1eae08fee2-88e38092da.zip/node_modules/react/index.js");const NumberSpinButton=({label,value,min=Number.MIN_SAFE_INTEGER,max=Number.MAX_SAFE_INTEGER,step=1,onChange,labelPosition,incrementButtonAriaLabel,decrementButtonAriaLabel})=>{const handleChange=(0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((v=>{onChange&&v<=max&&v>=min&&onChange(v)}),[onChange,min,max]),handleIncrement=(0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((v=>{handleChange(parseFloat(v)+step)}),[handleChange,step]),handleDecrement=(0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((v=>{handleChange(parseFloat(v)-step)}),[handleChange,step]),handleValidate=(0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((v=>{handleChange(parseFloat(v))}),[handleChange]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_fluentui_react__WEBPACK_IMPORTED_MODULE_2__.SpinButton,{value:value.toString(),onIncrement:handleIncrement,onDecrement:handleDecrement,onValidate:handleValidate,label,min,max,step,labelPosition,incrementButtonAriaLabel,decrementButtonAriaLabel})};try{NumberSpinButton.displayName="NumberSpinButton",NumberSpinButton.__docgenInfo={description:"NumberSpinButton creates a thematic styled SpinButton from Fluent",displayName:"NumberSpinButton",props:{label:{defaultValue:null,description:"",name:"label",required:!0,type:{name:"string"}},value:{defaultValue:null,description:"",name:"value",required:!0,type:{name:"number"}},min:{defaultValue:{value:"Number.MIN_SAFE_INTEGER"},description:"",name:"min",required:!1,type:{name:"number"}},max:{defaultValue:{value:"Number.MAX_SAFE_INTEGER"},description:"",name:"max",required:!1,type:{name:"number"}},step:{defaultValue:{value:"1"},description:"",name:"step",required:!1,type:{name:"number"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"(n: number) => any"}},labelPosition:{defaultValue:null,description:"",name:"labelPosition",required:!1,type:{name:"Position"}},incrementButtonAriaLabel:{defaultValue:null,description:"",name:"incrementButtonAriaLabel",required:!1,type:{name:"string"}},decrementButtonAriaLabel:{defaultValue:null,description:"",name:"decrementButtonAriaLabel",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/NumberSpinButton/NumberSpinButton.tsx#NumberSpinButton"]={docgenInfo:NumberSpinButton.__docgenInfo,name:"NumberSpinButton",path:"../components/src/NumberSpinButton/NumberSpinButton.tsx#NumberSpinButton"})}catch(__react_docgen_typescript_loader_error){}},"../components/src/Settings/Settings.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AdvancedSettingsStory:()=>AdvancedSettingsStory,BasicSettingsStory:()=>BasicSettingsStory,ContextSettingsStory:()=>ContextSettingsStory,GroupedSettingsStory:()=>GroupedSettingsStory,default:()=>Settings_stories});var ControlType,jsx_runtime=__webpack_require__("../../.yarn/cache/react-npm-18.2.0-1eae08fee2-88e38092da.zip/node_modules/react/jsx-runtime.js"),lib_commonjs=__webpack_require__("../../.yarn/__virtual__/@fluentui-react-virtual-9ea33fb0b9/0/cache/@fluentui-react-npm-8.106.9-8cdfe7d4ca-f4428f8fbb.zip/node_modules/@fluentui/react/lib-commonjs/index.js"),react=__webpack_require__("../../.yarn/cache/react-npm-18.2.0-1eae08fee2-88e38092da.zip/node_modules/react/index.js");!function(ControlType){ControlType.textbox="textbox",ControlType.spinner="spinner",ControlType.toggle="toggle",ControlType.dropdown="dropdown",ControlType.radio="radio",ControlType.slider="slider",ControlType.checkbox="checkbox"}(ControlType||(ControlType={}));const BooleanControl=({config,onChange})=>{const{key,value,type,label,control}=config,handleChange=(0,react.useCallback)(((_evt,checked)=>{onChange?.(key,checked)}),[key,onChange]);switch(control){case ControlType.toggle:return(0,jsx_runtime.jsx)(lib_commonjs.Toggle,{label,checked:value,onChange:handleChange,inlineLabel:!0},`toggle-${key}`);case ControlType.checkbox:return(0,jsx_runtime.jsx)(lib_commonjs.Checkbox,{styles:{label:{fontWeight:"bold"}},label,checked:value,onChange:handleChange},`checkbox-${key}`);default:throw new Error(`Unsupported control type ${JSON.stringify(control)} for ${type}`)}};try{BooleanControl.displayName="BooleanControl",BooleanControl.__docgenInfo={description:"BooleanControl creates either Checkbox or Toggle Fluent component\nwith thematic styling",displayName:"BooleanControl",props:{config:{defaultValue:null,description:"",name:"config",required:!0,type:{name:"ParsedSettingConfig"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"(key: string, value: any) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Settings/BooleanControl.tsx#BooleanControl"]={docgenInfo:BooleanControl.__docgenInfo,name:"BooleanControl",path:"../components/src/Settings/BooleanControl.tsx#BooleanControl"})}catch(__react_docgen_typescript_loader_error){}var NumberSpinButton=__webpack_require__("../components/src/NumberSpinButton/NumberSpinButton.tsx");const NumberControl=({config,onChange})=>{const{key,value,type,label,control,params}=config,handleChange=(0,react.useCallback)((n=>{onChange?.(key,n)}),[key,onChange]);switch(control){case ControlType.spinner:return(0,jsx_runtime.jsx)(NumberSpinButton.E,{label:label||"",value,labelPosition:lib_commonjs.Position.top,incrementButtonAriaLabel:`increment ${JSON.stringify(label)}`,decrementButtonAriaLabel:`decrement ${JSON.stringify(label)}`,...params,onChange:handleChange},`spinner-${key}`);case ControlType.slider:return(0,jsx_runtime.jsx)(lib_commonjs.Slider,{label,value,...params,onChange:handleChange},`slider-${key}`);default:throw new Error(`Unsupported control type ${JSON.stringify(control)} for ${type}`)}};try{NumberControl.displayName="NumberControl",NumberControl.__docgenInfo={description:"NumberControl creates either a thematic styled NumberSpinButton or Slider\nfrom Fluent component\ndepending on control type specified.",displayName:"NumberControl",props:{config:{defaultValue:null,description:"",name:"config",required:!0,type:{name:"ParsedSettingConfig"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"(key: string, value: any) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Settings/NumberControl.tsx#NumberControl"]={docgenInfo:NumberControl.__docgenInfo,name:"NumberControl",path:"../components/src/Settings/NumberControl.tsx#NumberControl"})}catch(__react_docgen_typescript_loader_error){}const selectDefaultControl=type=>{switch(type){case"string":return ControlType.textbox;case"number":return ControlType.spinner;case"boolean":return ControlType.toggle}},TextControl=({config,onChange})=>{const{key,value,type,label,control,params}=config,handleTextChange=(0,react.useCallback)(((_evt,text)=>{onChange?.(key,text)}),[key,onChange]),handleOptionChange=(0,react.useCallback)(((_evt,option)=>{onChange?.(key,option?.text)}),[key,onChange]);switch(control){case ControlType.textbox:return(0,jsx_runtime.jsx)(lib_commonjs.TextField,{label,value,onChange:handleTextChange},`textfield-${key}`);case ControlType.dropdown:if(!params?.options)throw new Error("Dropdown control type requires list of options");return(0,jsx_runtime.jsx)(lib_commonjs.Dropdown,{label,options:params.options.map((opt=>({key:opt,text:opt,selected:opt===value}))),onChange:handleOptionChange},`dropdown-${key}`);case ControlType.radio:if(!params?.options)throw new Error("Radio control type requires list of options");return(0,jsx_runtime.jsx)(lib_commonjs.ChoiceGroup,{label,selectedKey:value,options:params?.options.map((opt=>({key:opt,text:opt}))),onChange:handleOptionChange},`radio-${key}`);default:throw new Error(`Unsupported control type ${JSON.stringify(control)} for ${type}`)}};try{TextControl.displayName="TextControl",TextControl.__docgenInfo={description:"TextControl creates either thematic themed TextField, Dropdown, or ChoiceGroup\nas a Fluent component based on config options",displayName:"TextControl",props:{config:{defaultValue:null,description:"",name:"config",required:!0,type:{name:"ParsedSettingConfig"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"(key: string, value: any) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Settings/TextControl.tsx#TextControl"]={docgenInfo:TextControl.__docgenInfo,name:"TextControl",path:"../components/src/Settings/TextControl.tsx#TextControl"})}catch(__react_docgen_typescript_loader_error){}const Settings=({settings,config,groups=[],onChange})=>{const parsed=((settings,config)=>{const parsed=Object.entries(settings).reduce(((acc,cur)=>{const[key,value]=cur,type=typeof value,entry={key,value,type,control:selectDefaultControl(type),label:(str=key,str.replace(/([a-z\d])([A-Z])/g,"$1 $2").split(" ").map(((token,index)=>0===index?token.substr(0,1).toUpperCase()+token.substr(1).toLowerCase():token.toLowerCase())).join(" "))};var str;return acc[key],[...acc,entry]}),[]);return config?parsed.map((setting=>{const conf=config[setting.key]||{};return{...setting,control:conf.control||setting.control,params:conf.params||{}}})):parsed})(settings,config),handleChange=(0,react.useCallback)(((key,value)=>{onChange?.(key,value)}),[onChange]),grouped=((parsed,groups=[])=>{const depleting=[...parsed],grouped=groups.reduce(((acc,cur)=>{const{keys}=cur,settings=keys.map((key=>{const match=depleting.findIndex((s=>s.key===key));return depleting.splice(match,1)[0]}));return[...acc,{...cur,separator:!0,settings}]}),[]);return[{settings:depleting},...grouped]})(parsed,groups),groupings=grouped.map(((group,i)=>{const controls=group.settings.map((entry=>((config,onChange)=>{const{key,type}=config;let Control;switch(type){case"string":Control=TextControl;break;case"number":Control=NumberControl;break;case"boolean":Control=BooleanControl;break;default:return console.warn(`Data type ${type} not supported by settings`),null}return(0,jsx_runtime.jsx)("div",{style:{marginBottom:20},children:(0,jsx_runtime.jsx)(Control,{config,onChange})},`settings-control-${key}`)})(entry,handleChange)));return(0,jsx_runtime.jsxs)(lib_commonjs.Stack,{children:[group.separator?(0,jsx_runtime.jsx)(lib_commonjs.Separator,{children:group.label}):null,controls]},`settings-group-${i}`)}));return(0,jsx_runtime.jsx)("div",{children:groupings})};try{Settings.displayName="Settings",Settings.__docgenInfo={description:"A zero-config settings panel that  parses a supplied object\nand generates a list of Fluent UI controls based on the data types.\nA config object can be supplied that maps specific object fields to\nmore detailed control config, such as changing between a Toggle or Checkbox.\nIn addition, it will invoke a onChange handler for any setting, supplying the\nchanged setting's key and new value.\nNote that this could be used in an entirely declarative/serializable manner if desired.",displayName:"Settings",props:{settings:{defaultValue:null,description:"Required object to render into a settings panel.\nThis can be basically anything, but should be flat\nat the moment, as complex/nest objects are not supported.",name:"settings",required:!0,type:{name:"any"}},config:{defaultValue:null,description:"Map of optional config params for individual settings.\nThe key should match the key present in the settings object.",name:"config",required:!1,type:{name:"{ [key: string]: SettingConfig; }"}},groups:{defaultValue:{value:"[]"},description:"List of optional groups to sort the settings into, with a separator between each.\nThe group is a list of the keys to include, with an optional label for the separator.",name:"groups",required:!1,type:{name:"SettingsGroup[]"}},onChange:{defaultValue:null,description:"Handler to notify when any of the settings has changed.\nCallback args will be the key and value that changed.\nMerging, etc. is up to the consumer.",name:"onChange",required:!1,type:{name:"(key: string, value: any) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Settings/Settings.tsx#Settings"]={docgenInfo:Settings.__docgenInfo,name:"Settings",path:"../components/src/Settings/Settings.tsx#Settings"})}catch(__react_docgen_typescript_loader_error){}const Settings_stories={title:"@essex:components/Settings"},basicSettings={title:"Graph",algorithm:"Louvain",nodeLimit:1e4,showEdges:!0},BasicSettingsComponent=()=>{const[settings,setSettings]=(0,react.useState)(basicSettings),handleChange=(0,react.useCallback)(((key,value)=>{const changed={...settings,[`${key}`]:value};setSettings(changed)}),[settings]);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)(lib_commonjs.MessageBar,{children:["This example shows a basic object parsed into settings and rendered into the default control set.",(0,jsx_runtime.jsx)("pre",{children:"\n  {\n      title: 'Graph',\n      algorithm: 'Louvain',\n      nodeLimit: 10000,\n      showEdges: true\n  }\n  "})]}),(0,jsx_runtime.jsx)(Settings,{settings,onChange:handleChange})]})},AdvancedSettingsComponent=()=>{const[settings,setSettings]=(0,react.useState)(basicSettings),handleChange=(0,react.useCallback)(((key,value)=>{const changed={...settings,[`${key}`]:value};setSettings(changed)}),[settings]);return(0,jsx_runtime.jsx)(Settings,{settings,config:{title:{control:"dropdown",params:{options:["None","Graph","Nodes","Edges"]}},algorithm:{control:"radio",params:{options:["Louvain","Leiden"]}},nodeLimit:{control:"slider",params:{max:2e4,step:1e3}},showEdges:{control:"checkbox"}},onChange:handleChange})},BasicSettingsStory={render:()=>(0,jsx_runtime.jsx)(BasicSettingsComponent,{}),name:"Basic Settings"},AdvancedSettingsStory={render:()=>(0,jsx_runtime.jsx)(AdvancedSettingsComponent,{}),name:"Advanced Settings"},GroupedPanel=()=>{const[settings,setSettings]=(0,react.useState)(basicSettings),handleChange=(0,react.useCallback)(((key,value)=>{const changed={...settings,[`${key}`]:value};setSettings(changed)}),[settings]);return(0,jsx_runtime.jsx)(Settings,{settings,groups:[{label:"Rendering",keys:["nodeLimit","showEdges"]},{label:"Communities",keys:["algorithm"]}],onChange:handleChange})},ContextSettingComponent=()=>{const renderPanel=(0,react.useCallback)((()=>(0,jsx_runtime.jsx)("div",{style:{margin:10},children:(0,jsx_runtime.jsx)(GroupedPanel,{})})),[]);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(lib_commonjs.MessageBar,{children:"This example shows the settings panel in a dropdown context menu."}),(0,jsx_runtime.jsx)(lib_commonjs.DefaultButton,{text:"Click for settings",menuProps:{items:[{key:"dropdown-settings",onRender:renderPanel}]}})]})},GroupedSettingsStory={render:()=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(lib_commonjs.MessageBar,{children:'This example shows settings within groups, which automatically get a separator and optional label. Any ungrouped settings are placed at the top ("Title" in this example).'}),(0,jsx_runtime.jsx)(GroupedPanel,{})]}),name:"Grouped Settings"},ContextSettingsStory={render:()=>(0,jsx_runtime.jsx)(ContextSettingComponent,{}),name:"Context Menu Settings"};BasicSettingsStory.parameters={...BasicSettingsStory.parameters,docs:{...BasicSettingsStory.parameters?.docs,source:{originalSource:"{\n  render: () => /*#__PURE__*/_jsx(BasicSettingsComponent, {}),\n  name: 'Basic Settings'\n}",...BasicSettingsStory.parameters?.docs?.source}}},AdvancedSettingsStory.parameters={...AdvancedSettingsStory.parameters,docs:{...AdvancedSettingsStory.parameters?.docs,source:{originalSource:"{\n  render: () => /*#__PURE__*/_jsx(AdvancedSettingsComponent, {}),\n  name: 'Advanced Settings'\n}",...AdvancedSettingsStory.parameters?.docs?.source}}},GroupedSettingsStory.parameters={...GroupedSettingsStory.parameters,docs:{...GroupedSettingsStory.parameters?.docs,source:{originalSource:"{\n  render: () => {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(MessageBar, {\n        children: 'This example shows settings within groups, which automatically get a separator and optional label. Any ungrouped settings are placed at the top (\"Title\" in this example).'\n      }), /*#__PURE__*/_jsx(GroupedPanel, {})]\n    });\n  },\n  name: 'Grouped Settings'\n}",...GroupedSettingsStory.parameters?.docs?.source}}},ContextSettingsStory.parameters={...ContextSettingsStory.parameters,docs:{...ContextSettingsStory.parameters?.docs,source:{originalSource:"{\n  render: () => /*#__PURE__*/_jsx(ContextSettingComponent, {}),\n  name: 'Context Menu Settings'\n}",...ContextSettingsStory.parameters?.docs?.source}}}}}]);